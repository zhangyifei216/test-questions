import React from 'react';
import {expect} from 'chai';
import {shallow} from 'enzyme';
import ACAddressSection from '../../../../source/container/InfoCollect/AssociatedParty/ACAddressSection';
var assert = require('assert');

describe('rendering <ACAddressSection> component', () => {
  const section = {
    categoryId: 'Su_SherLock_Entity_Information',
    sectionName: 'Address',
    hidden: false,
    sectionSequence: 4,
    coreData: true,
    sectionId: 'Sn_Address',
    fieldList: [{
      initData: '',
      fieldName: 'Address Type',
      hidden: false,
      tooltipText: 'Address Type',
      coreData: true,
      labelCd: 'Address Type',
      fullyQualifiedId: '',
      entityPath: 'addressType',
      dataTypeCd: 'TEXT',
      readonly: false,
      fieldSequence: 1,
      fieldOptionCd: 'Mandatory',
      fieldGroupId: 1,
      fieldType: 'DROPDOWN',
      fieldId: ''
    }
    ]
  };
  const fieldName = 'newIndAssociation.addresses';
  const addresses = [];
  const wrapper = shallow(<ACAddressSection addresses={addresses} onFieldChange={() => {}} array={{remove: ''}}
    fieldName={fieldName} section={section} expandAll={false} />);
  wrapper.instance().props.array.remove = () => {};
  wrapper.instance().props.array.push = () => {};
  wrapper.instance().props.array.splice = () => {};
  it('iniate <ACAddressSection> component', () => {
    expect(wrapper.length).to.equal(1);
  });
  it('check <CollapsePanel> component', () => {
    expect(wrapper.find('CollapsePanel')).to.have.lengthOf(1);
  });
  it('check <FlexPanel> component', () => {
    expect(wrapper.find('FlexPanel')).to.have.lengthOf(1);
  });
  it('handleToggle function for true value', () => {
    const expand = true;
    const fxnInstance = wrapper.instance();
    fxnInstance.handleToggle(expand);
    const expandState = wrapper.state()['expand'];
    assert.deepEqual(expandState, expand);
  });
  it('handleToggle function for false value', () => {
    const expand = false;
    const fxnInstance = wrapper.instance();
    fxnInstance.handleToggle(expand);
    const expandState = wrapper.state()['expand'];
    assert.deepEqual(expandState, expand);
  });
  it('handleView function for false value', () => {
    const cellData = {
      row: {
        addressId: 1538052126305,
        addressType: 'OPERATIONAL',
        addressTypeName: 'Operational',
        addressLine1: '221B,Baker Street',
        city: 'LONDON',
        country: 'GBR',
        countryName: 'United Kingdom (the)',
        state: 'YKS',
        stateName: 'Yorkshire'
      }
    };
    const mockData = {...cellData.row};
    const showAddressModalStateBefore = wrapper.state()['showAddressModal'];
    const fxnInstance = wrapper.instance();
    fxnInstance.handleView(cellData);
    const showAddressModalStateAfter = wrapper.state()['showAddressModal'];
    const editAddressState = wrapper.state()['editAddress'];
    if (showAddressModalStateBefore) {
      assert.deepEqual(showAddressModalStateBefore, showAddressModalStateAfter);
    } else {
      assert.deepEqual(!showAddressModalStateBefore, showAddressModalStateAfter);
    }
    assert.deepEqual(editAddressState, mockData);
  });
  it('onRemoveConfirmCancel function for false value', () => {
    const showRemoveConfirm = false;
    const removeRow = {};
    const fxnInstance = wrapper.instance();
    fxnInstance.onRemoveConfirmCancel();
    const showRemoveConfirmState = wrapper.state()['showRemoveConfirm'];
    const removeRowState = wrapper.state()['removeRow'];
    assert.deepEqual(removeRowState, removeRow);
    assert.deepEqual(showRemoveConfirmState, showRemoveConfirm);
  });
  it('onRemoveConfirmContinue function', () => {
    const showRemoveConfirm = false;
    const removeRow = {};
    const fxnInstance = wrapper.instance();
    fxnInstance.onRemoveConfirmContinue();
    const showRemoveConfirmState = wrapper.state()['showRemoveConfirm'];
    const removeRowState = wrapper.state()['removeRow'];
    assert.deepEqual(removeRowState, removeRow);
    assert.deepEqual(showRemoveConfirmState, showRemoveConfirm);
  });
  it('handleAddressSave function for false value', () => {
    const formData = {
      addressId: 1538052126305,
      addressType: 'OPERATIONAL',
      addressTypeName: 'Operational',
      addressLine1: '221B,Baker Street',
      city: 'LONDON',
      country: 'GBR',
      countryName: 'United Kingdom (the)',
      state: 'YKS',
      stateName: 'Yorkshire'
    };
    const showAddressModal = false;
    const fxnInstance = wrapper.instance(formData);
    fxnInstance.handleAddressSave();
    const showAddressModalState = wrapper.state()['showAddressModal'];
    assert.deepEqual(showAddressModalState, showAddressModal);
  });
  it('handleAddressCancel function', () => {
    const showAddressModal = false;
    const fxnInstance = wrapper.instance();
    fxnInstance.handleAddressCancel();
    const showAddressModalState = wrapper.state()['showAddressModal'];
    assert.deepEqual(showAddressModalState, showAddressModal);
  });
  it('handleAddClick function', () => {
    const showAddressModal = true;
    const fxnInstance = wrapper.instance();
    fxnInstance.handleAddClick();
    const showAddressModalState = wrapper.state()['showAddressModal'];
    assert.deepEqual(showAddressModalState, showAddressModal);
  });
  it('handleRemoveClick function', () => {
    const row = {
      row: {
        addressId: 1538052126305,
        addressType: 'OPERATIONAL',
        addressTypeName: 'Operational',
        addressLine1: '221B,Baker Street',
        city: 'LONDON',
        country: 'GBR',
        countryName: 'United Kingdom (the)',
        state: 'YKS',
        stateName: 'Yorkshire'
      }
    };
    const fxnInstance = wrapper.instance();
    fxnInstance.handleRemoveClick({row});
  });
  it('actionCellRendder function for KYC', () => {
    const cellData = {
      row: {
        addressId: 1538052126305,
        addressType: 'OPERATIONAL',
        addressTypeName: 'Operational',
        addressLine1: '221B,Baker Street',
        city: 'LONDON',
        country: 'GBR',
        countryName: 'United Kingdom (the)',
        state: 'YKS',
        stateName: 'Yorkshire',
        sourceSystem: 'KYC'
      }
    };
    const fxnInstance = wrapper.instance();
    fxnInstance.actionCellRendder(cellData);
  });
  it('actionCellRendder function for KYC', () => {
    const cellData = {
      row: {
        addressId: 1538052126305,
        addressType: 'OPERATIONAL',
        addressTypeName: 'Operational',
        addressLine1: '221B,Baker Street',
        city: 'LONDON',
        country: 'GBR',
        countryName: 'United Kingdom (the)',
        state: 'YKS',
        stateName: 'Yorkshire',
        sourceSystem: 'MDM'
      }
    };
    const fxnInstance = wrapper.instance();
    fxnInstance.actionCellRendder(cellData);
  });
});

